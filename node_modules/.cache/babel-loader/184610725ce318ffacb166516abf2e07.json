{"ast":null,"code":"import { useEffect, useState } from 'react'; // Hook\n\nconst useMedia = (queries, values, defaultValue) => {\n  // Array containing a media query list for each query\n  const mediaQueryLists = queries.map(q => window.matchMedia(q)); // Function that gets value based on matching media query\n\n  const getValue = () => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex(mql => mql.matches); // Return related value or defaultValue if none\n\n    return typeof values[index] !== 'undefined' ? values[index] : defaultValue;\n  }; // State and setter for matched value\n\n\n  const [value, setValue] = useState(getValue);\n  useEffect(() => {\n    // Event listener callback\n    // Note: By defining getValue outside of useEffect we ensure that it has ...\n    // ... current values of hook args (as this hook callback is created once on mount).\n    const handler = () => setValue(getValue); // Set a listener for each media query with above handler as callback.\n\n\n    mediaQueryLists.forEach(mql => mql.addListener(handler)); // Remove listeners on cleanup\n\n    return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\n  }, [] // Empty array ensures effect is only run on mount and unmount\n  );\n  return value;\n};\n\nexport default useMedia;","map":{"version":3,"sources":["C:/Users/Nightrift/Desktop/Coding/Codes/Hooks/Widgets/widgets/src/hooks/useMedia.js"],"names":["useEffect","useState","useMedia","queries","values","defaultValue","mediaQueryLists","map","q","window","matchMedia","getValue","index","findIndex","mql","matches","value","setValue","handler","forEach","addListener","removeListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAGA;;AACA,MAAMC,QAAQ,GAAG,CAACC,OAAD,EAAUC,MAAV,EAAkBC,YAAlB,KAAmC;AAChD;AACA,QAAMC,eAAe,GAAGH,OAAO,CAACI,GAAR,CAAYC,CAAC,IAAIC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,CAAjB,CAAxB,CAFgD,CAIhD;;AACA,QAAMG,QAAQ,GAAG,MAAM;AACnB;AACA,UAAMC,KAAK,GAAGN,eAAe,CAACO,SAAhB,CAA0BC,GAAG,IAAIA,GAAG,CAACC,OAArC,CAAd,CAFmB,CAGnB;;AACA,WAAO,OAAOX,MAAM,CAACQ,KAAD,CAAb,KAAyB,WAAzB,GAAuCR,MAAM,CAACQ,KAAD,CAA7C,GAAuDP,YAA9D;AACH,GALD,CALgD,CAYhD;;;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAACU,QAAD,CAAlC;AAEAX,EAAAA,SAAS,CACL,MAAM;AACF;AACA;AACA;AACA,UAAMkB,OAAO,GAAG,MAAMD,QAAQ,CAACN,QAAD,CAA9B,CAJE,CAKF;;;AACAL,IAAAA,eAAe,CAACa,OAAhB,CAAwBL,GAAG,IAAIA,GAAG,CAACM,WAAJ,CAAgBF,OAAhB,CAA/B,EANE,CAOF;;AACA,WAAO,MAAMZ,eAAe,CAACa,OAAhB,CAAwBL,GAAG,IAAIA,GAAG,CAACO,cAAJ,CAAmBH,OAAnB,CAA/B,CAAb;AACH,GAVI,EAWL,EAXK,CAWF;AAXE,GAAT;AAcA,SAAOF,KAAP;AACH,CA9BD;;AAgCA,eAAed,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\n\r\n// Hook\r\nconst useMedia = (queries, values, defaultValue) => {\r\n    // Array containing a media query list for each query\r\n    const mediaQueryLists = queries.map(q => window.matchMedia(q));\r\n\r\n    // Function that gets value based on matching media query\r\n    const getValue = () => {\r\n        // Get index of first media query that matches\r\n        const index = mediaQueryLists.findIndex(mql => mql.matches);\r\n        // Return related value or defaultValue if none\r\n        return typeof values[index] !== 'undefined' ? values[index] : defaultValue;\r\n    };\r\n\r\n    // State and setter for matched value\r\n    const [value, setValue] = useState(getValue);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Event listener callback\r\n            // Note: By defining getValue outside of useEffect we ensure that it has ...\r\n            // ... current values of hook args (as this hook callback is created once on mount).\r\n            const handler = () => setValue(getValue);\r\n            // Set a listener for each media query with above handler as callback.\r\n            mediaQueryLists.forEach(mql => mql.addListener(handler));\r\n            // Remove listeners on cleanup\r\n            return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\r\n        },\r\n        [] // Empty array ensures effect is only run on mount and unmount\r\n    );\r\n\r\n    return value;\r\n}\r\n\r\nexport default useMedia;"]},"metadata":{},"sourceType":"module"}